{"kind":"Notebook","sha256":"626226445ebfb52b3e6ba9997c8e2c8c07a0b47cb458cfe271d2618a11e3842a","slug":"finaldata","location":"/FinalData.ipynb","dependencies":[],"frontmatter":{"github":"https://github.com/charlottegoebel/Volleyball-Data-Analysis","keywords":[],"exports":[{"format":"ipynb","filename":"FinalData.ipynb","url":"/FinalData-8f8bb773cd22792683fc8db2db401aa0.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport matplotlib as plt\nimport numpy as np","key":"xNwNBFe2U1"},{"type":"output","id":"Ui7zAWk8zY1Wq2XO-ivvJ","data":[],"key":"hSOj3vawKU"}],"data":{"type":"notebook-code"},"key":"C2GR8Ft5rv"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"super_data = pd.read_csv(\"SuperDataSheet - Sheet1.csv\")\nsuper_data","key":"Q0cAiPQrVb"},{"type":"output","id":"SPcKRhjtWFpqZEE8O1DOB","data":[{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>SP</th>\n      <th>Ast</th>\n      <th>Ast/S</th>\n      <th>BHA</th>\n      <th>BHE</th>\n      <th>D</th>\n      <th>DE</th>\n      <th>D/S</th>\n      <th>D/M</th>\n      <th>...</th>\n      <th>Tot Blks</th>\n      <th>B/S</th>\n      <th>B/M</th>\n      <th>BE</th>\n      <th>K</th>\n      <th>K/S</th>\n      <th>Kill %</th>\n      <th>Att</th>\n      <th>E</th>\n      <th>Hit %</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Arun</td>\n      <td>74</td>\n      <td>6</td>\n      <td>0.1</td>\n      <td>7</td>\n      <td>1</td>\n      <td>333</td>\n      <td>75</td>\n      <td>4.5</td>\n      <td>15.1</td>\n      <td>...</td>\n      <td>4.0</td>\n      <td>0.1</td>\n      <td>0.2</td>\n      <td>2</td>\n      <td>156</td>\n      <td>2.1</td>\n      <td>25.3</td>\n      <td>616</td>\n      <td>87</td>\n      <td>0.112</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Layno</td>\n      <td>71</td>\n      <td>402</td>\n      <td>5.7</td>\n      <td>1533</td>\n      <td>33</td>\n      <td>191</td>\n      <td>52</td>\n      <td>2.7</td>\n      <td>9.1</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>0.1</td>\n      <td>6.8</td>\n      <td>74</td>\n      <td>12</td>\n      <td>-0.095</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sanford</td>\n      <td>74</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>33</td>\n      <td>17</td>\n      <td>0.4</td>\n      <td>1.5</td>\n      <td>...</td>\n      <td>30.0</td>\n      <td>0.4</td>\n      <td>1.4</td>\n      <td>9</td>\n      <td>83</td>\n      <td>1.1</td>\n      <td>31.9</td>\n      <td>260</td>\n      <td>32</td>\n      <td>0.196</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Collier</td>\n      <td>69</td>\n      <td>3</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>75</td>\n      <td>28</td>\n      <td>1.1</td>\n      <td>3.4</td>\n      <td>...</td>\n      <td>8.0</td>\n      <td>0.1</td>\n      <td>0.4</td>\n      <td>4</td>\n      <td>90</td>\n      <td>1.3</td>\n      <td>23.3</td>\n      <td>386</td>\n      <td>67</td>\n      <td>0.060</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ulak</td>\n      <td>74</td>\n      <td>3</td>\n      <td>0.0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>180</td>\n      <td>42</td>\n      <td>2.4</td>\n      <td>8.2</td>\n      <td>...</td>\n      <td>31.0</td>\n      <td>0.4</td>\n      <td>1.4</td>\n      <td>20</td>\n      <td>2</td>\n      <td>0.0</td>\n      <td>7.4</td>\n      <td>27</td>\n      <td>7</td>\n      <td>-0.185</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Okonkwo</td>\n      <td>74</td>\n      <td>2</td>\n      <td>0.0</td>\n      <td>4</td>\n      <td>2</td>\n      <td>18</td>\n      <td>3</td>\n      <td>0.2</td>\n      <td>0.8</td>\n      <td>...</td>\n      <td>4.0</td>\n      <td>0.1</td>\n      <td>0.2</td>\n      <td>6</td>\n      <td>61</td>\n      <td>0.8</td>\n      <td>34.1</td>\n      <td>179</td>\n      <td>39</td>\n      <td>0.123</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Donlon</td>\n      <td>74</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>119</td>\n      <td>32</td>\n      <td>1.6</td>\n      <td>5.4</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>140</td>\n      <td>1.9</td>\n      <td>28.6</td>\n      <td>489</td>\n      <td>84</td>\n      <td>0.115</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Ellis</td>\n      <td>8</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.1</td>\n      <td>0.2</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.3</td>\n      <td>14.3</td>\n      <td>14</td>\n      <td>3</td>\n      <td>-0.071</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Wilkins</td>\n      <td>64</td>\n      <td>13</td>\n      <td>0.2</td>\n      <td>14</td>\n      <td>1</td>\n      <td>314</td>\n      <td>93</td>\n      <td>4.9</td>\n      <td>16.5</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0.1</td>\n      <td>13.3</td>\n      <td>45</td>\n      <td>6</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Todd</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.2</td>\n      <td>0.3</td>\n      <td>...</td>\n      <td>28.6</td>\n      <td>7.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.2</td>\n      <td>28.6</td>\n      <td>7</td>\n      <td>1</td>\n      <td>0.143</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Woods</td>\n      <td>64</td>\n      <td>223</td>\n      <td>3.5</td>\n      <td>880</td>\n      <td>18</td>\n      <td>137</td>\n      <td>39</td>\n      <td>2.1</td>\n      <td>7.2</td>\n      <td>...</td>\n      <td>28.9</td>\n      <td>443.0</td>\n      <td>58.0</td>\n      <td>13</td>\n      <td>128</td>\n      <td>2.0</td>\n      <td>28.9</td>\n      <td>443</td>\n      <td>58</td>\n      <td>0.158</td>\n    </tr>\n  </tbody>\n</table>\n<p>11 rows Ã— 33 columns</p>\n</div>","content_type":"text/html"},"text/plain":{"content":"       Name  SP  Ast  Ast/S   BHA  BHE    D  DE  D/S   D/M  ...  Tot Blks  \\\n0      Arun  74    6    0.1     7    1  333  75  4.5  15.1  ...       4.0   \n1     Layno  71  402    5.7  1533   33  191  52  2.7   9.1  ...       0.0   \n2   Sanford  74    0    0.0     0    0   33  17  0.4   1.5  ...      30.0   \n3   Collier  69    3    0.0     3    0   75  28  1.1   3.4  ...       8.0   \n4      Ulak  74    3    0.0     4    1  180  42  2.4   8.2  ...      31.0   \n5   Okonkwo  74    2    0.0     4    2   18   3  0.2   0.8  ...       4.0   \n6    Donlon  74    0    0.0     2    2  119  32  1.6   5.4  ...       0.0   \n7     Ellis   8    0    0.0     1    1    1   2  0.1   0.2  ...       0.0   \n8   Wilkins  64   13    0.2    14    1  314  93  4.9  16.5  ...       0.0   \n9      Todd   9    0    0.0     0    0    2   1  0.2   0.3  ...      28.6   \n10    Woods  64  223    3.5   880   18  137  39  2.1   7.2  ...      28.9   \n\n      B/S   B/M  BE    K  K/S  Kill %  Att   E  Hit %  \n0     0.1   0.2   2  156  2.1    25.3  616  87  0.112  \n1     0.0   0.0   0    5  0.1     6.8   74  12 -0.095  \n2     0.4   1.4   9   83  1.1    31.9  260  32  0.196  \n3     0.1   0.4   4   90  1.3    23.3  386  67  0.060  \n4     0.4   1.4  20    2  0.0     7.4   27   7 -0.185  \n5     0.1   0.2   6   61  0.8    34.1  179  39  0.123  \n6     0.0   0.0   0  140  1.9    28.6  489  84  0.115  \n7     0.0   0.0   0    2  0.3    14.3   14   3 -0.071  \n8     0.0   0.0   0    6  0.1    13.3   45   6  0.000  \n9     7.0   1.0   0    2  0.2    28.6    7   1  0.143  \n10  443.0  58.0  13  128  2.0    28.9  443  58  0.158  \n\n[11 rows x 33 columns]","content_type":"text/plain"}}}],"key":"xlC3zXgtQI"}],"data":{"type":"notebook-code"},"key":"TXyerD2STE"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"super_data_edited = super_data[[\"Name\", \"SP\", \"BHA\", \"BHE\", \"D\", \"DE\", \"Kill %\", \"Hit %\", \"Ace %\", \"Serv %\"]] ","key":"NQ0PQNl5J5"},{"type":"output","id":"hDlR2YyMZxU1IdIQ9qBce","data":[],"key":"yF3fJsflHC"}],"data":{"type":"notebook-code"},"key":"x8ntX4Vckt"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df = pd.DataFrame(super_data_edited)\ndf.insert(2, \"R\", [246, 0, 7, 100, 206, 6, 115, 3, 299, 0, 92], True)\ndf.insert(3, \"RE\", [26, 0, 0, 22, 43, 1, 22, 1, 42, 0, 8], True)\nprint(df)","key":"CKvdmnNNoh"},{"type":"output","id":"ikeQHjI0vW1xtXA0hc7fR","data":[{"name":"stdout","output_type":"stream","text":"       Name  SP    R  RE   BHA  BHE    D  DE  Kill %  Hit %  Ace %  Serv %\n0      Arun  74  246  26     7    1  333  75    25.3  0.112   16.3    90.7\n1     Layno  71    0   0  1533   33  191  52     6.8 -0.095   16.8    94.5\n2   Sanford  74    7   0     0    0   33  17    31.9  0.196    8.4    92.1\n3   Collier  69  100  22     3    0   75  28    23.3  0.060   10.6    80.9\n4      Ulak  74  206  43     4    1  180  42     7.4 -0.185   21.2    86.5\n5   Okonkwo  74    6   1     4    2   18   3    34.1  0.123    0.0     0.0\n6    Donlon  74  115  22     2    2  119  32    28.6  0.115    9.1    84.8\n7     Ellis   8    3   1     1    1    1   2    14.3 -0.071    0.0     0.0\n8   Wilkins  64  299  42    14    1  314  93    13.3  0.000    9.9    96.7\n9      Todd   9    0   0     0    0    2   1    28.6  0.143    0.0     0.0\n10    Woods  64   92   8   880   18  137  39    28.9  0.158   19.3    83.0\n"}],"key":"KcAm3HcHSP"}],"data":{"type":"notebook-code"},"key":"hwaPQZCmbT"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"super_data_edited2 = df[[\"Name\", \"SP\", \"R\", \"RE\", \"BHA\", \"BHE\", \"D\", \"DE\", \"Kill %\", \"Hit %\", \"Ace %\", \"Serv %\"]]\nsuper_data_edited2","key":"IwFv0iWjm3"},{"type":"output","id":"KZ-0iqfYsz0erfp_h8_Ca","data":[{"output_type":"execute_result","execution_count":8,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>SP</th>\n      <th>R</th>\n      <th>RE</th>\n      <th>BHA</th>\n      <th>BHE</th>\n      <th>D</th>\n      <th>DE</th>\n      <th>Kill %</th>\n      <th>Hit %</th>\n      <th>Ace %</th>\n      <th>Serv %</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Arun</td>\n      <td>74</td>\n      <td>246</td>\n      <td>26</td>\n      <td>7</td>\n      <td>1</td>\n      <td>333</td>\n      <td>75</td>\n      <td>25.3</td>\n      <td>0.112</td>\n      <td>16.3</td>\n      <td>90.7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Layno</td>\n      <td>71</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1533</td>\n      <td>33</td>\n      <td>191</td>\n      <td>52</td>\n      <td>6.8</td>\n      <td>-0.095</td>\n      <td>16.8</td>\n      <td>94.5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sanford</td>\n      <td>74</td>\n      <td>7</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>33</td>\n      <td>17</td>\n      <td>31.9</td>\n      <td>0.196</td>\n      <td>8.4</td>\n      <td>92.1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Collier</td>\n      <td>69</td>\n      <td>100</td>\n      <td>22</td>\n      <td>3</td>\n      <td>0</td>\n      <td>75</td>\n      <td>28</td>\n      <td>23.3</td>\n      <td>0.060</td>\n      <td>10.6</td>\n      <td>80.9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ulak</td>\n      <td>74</td>\n      <td>206</td>\n      <td>43</td>\n      <td>4</td>\n      <td>1</td>\n      <td>180</td>\n      <td>42</td>\n      <td>7.4</td>\n      <td>-0.185</td>\n      <td>21.2</td>\n      <td>86.5</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Okonkwo</td>\n      <td>74</td>\n      <td>6</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>18</td>\n      <td>3</td>\n      <td>34.1</td>\n      <td>0.123</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Donlon</td>\n      <td>74</td>\n      <td>115</td>\n      <td>22</td>\n      <td>2</td>\n      <td>2</td>\n      <td>119</td>\n      <td>32</td>\n      <td>28.6</td>\n      <td>0.115</td>\n      <td>9.1</td>\n      <td>84.8</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Ellis</td>\n      <td>8</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>14.3</td>\n      <td>-0.071</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Wilkins</td>\n      <td>64</td>\n      <td>299</td>\n      <td>42</td>\n      <td>14</td>\n      <td>1</td>\n      <td>314</td>\n      <td>93</td>\n      <td>13.3</td>\n      <td>0.000</td>\n      <td>9.9</td>\n      <td>96.7</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Todd</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>28.6</td>\n      <td>0.143</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Woods</td>\n      <td>64</td>\n      <td>92</td>\n      <td>8</td>\n      <td>880</td>\n      <td>18</td>\n      <td>137</td>\n      <td>39</td>\n      <td>28.9</td>\n      <td>0.158</td>\n      <td>19.3</td>\n      <td>83.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"       Name  SP    R  RE   BHA  BHE    D  DE  Kill %  Hit %  Ace %  Serv %\n0      Arun  74  246  26     7    1  333  75    25.3  0.112   16.3    90.7\n1     Layno  71    0   0  1533   33  191  52     6.8 -0.095   16.8    94.5\n2   Sanford  74    7   0     0    0   33  17    31.9  0.196    8.4    92.1\n3   Collier  69  100  22     3    0   75  28    23.3  0.060   10.6    80.9\n4      Ulak  74  206  43     4    1  180  42     7.4 -0.185   21.2    86.5\n5   Okonkwo  74    6   1     4    2   18   3    34.1  0.123    0.0     0.0\n6    Donlon  74  115  22     2    2  119  32    28.6  0.115    9.1    84.8\n7     Ellis   8    3   1     1    1    1   2    14.3 -0.071    0.0     0.0\n8   Wilkins  64  299  42    14    1  314  93    13.3  0.000    9.9    96.7\n9      Todd   9    0   0     0    0    2   1    28.6  0.143    0.0     0.0\n10    Woods  64   92   8   880   18  137  39    28.9  0.158   19.3    83.0","content_type":"text/plain"}}}],"key":"cJb1TiUXPp"}],"data":{"type":"notebook-code"},"key":"sSRLVIfrol"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df.insert(4, \"BH %\", (((100 * (super_data_edited[\"BHA\"] - super_data_edited[\"BHE\"])) / super_data_edited[\"BHA\"] )), True)\ndf.insert(5, \"SR %\", ((100 * super_data_edited2[\"R\"]) / ((super_data_edited2[\"R\"] + super_data_edited2[\"RE\"]))), True)\ndf.insert(6, \"D %\", ( (100 * super_data_edited2[\"D\"]) / (super_data_edited2[\"D\"] + super_data_edited2[\"DE\"]) ), True)\nprint(df)","key":"HMyKKAP4BN"},{"type":"output","id":"T5CqPIdBqSxaR43b-KJFs","data":[{"name":"stdout","output_type":"stream","text":"       Name  SP    R  RE        BH %        SR %        D %   BHA  BHE    D  \\\n0      Arun  74  246  26   85.714286   90.441176  81.617647     7    1  333   \n1     Layno  71    0   0   97.847358         NaN  78.600823  1533   33  191   \n2   Sanford  74    7   0         NaN  100.000000  66.000000     0    0   33   \n3   Collier  69  100  22  100.000000   81.967213  72.815534     3    0   75   \n4      Ulak  74  206  43   75.000000   82.730924  81.081081     4    1  180   \n5   Okonkwo  74    6   1   50.000000   85.714286  85.714286     4    2   18   \n6    Donlon  74  115  22    0.000000   83.941606  78.807947     2    2  119   \n7     Ellis   8    3   1    0.000000   75.000000  33.333333     1    1    1   \n8   Wilkins  64  299  42   92.857143   87.683284  77.149877    14    1  314   \n9      Todd   9    0   0         NaN         NaN  66.666667     0    0    2   \n10    Woods  64   92   8   97.954545   92.000000  77.840909   880   18  137   \n\n    DE  Kill %  Hit %  Ace %  Serv %  \n0   75    25.3  0.112   16.3    90.7  \n1   52     6.8 -0.095   16.8    94.5  \n2   17    31.9  0.196    8.4    92.1  \n3   28    23.3  0.060   10.6    80.9  \n4   42     7.4 -0.185   21.2    86.5  \n5    3    34.1  0.123    0.0     0.0  \n6   32    28.6  0.115    9.1    84.8  \n7    2    14.3 -0.071    0.0     0.0  \n8   93    13.3  0.000    9.9    96.7  \n9    1    28.6  0.143    0.0     0.0  \n10  39    28.9  0.158   19.3    83.0  \n"}],"key":"MIylRgFwRn"}],"data":{"type":"notebook-code"},"key":"bWaRG1FAPk"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df1 = df[[\"Name\",\"Kill %\", \"Hit %\", \"Ace %\", \"Serv %\", \"BH %\", \"SR %\", \"D %\"]]\ndf1","key":"toDxJNK6An"},{"type":"output","id":"UGsHXkVx8zJmV80mllDrz","data":[{"output_type":"execute_result","execution_count":10,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Kill %</th>\n      <th>Hit %</th>\n      <th>Ace %</th>\n      <th>Serv %</th>\n      <th>BH %</th>\n      <th>SR %</th>\n      <th>D %</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Arun</td>\n      <td>25.3</td>\n      <td>0.112</td>\n      <td>16.3</td>\n      <td>90.7</td>\n      <td>85.714286</td>\n      <td>90.441176</td>\n      <td>81.617647</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Layno</td>\n      <td>6.8</td>\n      <td>-0.095</td>\n      <td>16.8</td>\n      <td>94.5</td>\n      <td>97.847358</td>\n      <td>NaN</td>\n      <td>78.600823</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sanford</td>\n      <td>31.9</td>\n      <td>0.196</td>\n      <td>8.4</td>\n      <td>92.1</td>\n      <td>NaN</td>\n      <td>100.000000</td>\n      <td>66.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Collier</td>\n      <td>23.3</td>\n      <td>0.060</td>\n      <td>10.6</td>\n      <td>80.9</td>\n      <td>100.000000</td>\n      <td>81.967213</td>\n      <td>72.815534</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ulak</td>\n      <td>7.4</td>\n      <td>-0.185</td>\n      <td>21.2</td>\n      <td>86.5</td>\n      <td>75.000000</td>\n      <td>82.730924</td>\n      <td>81.081081</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Okonkwo</td>\n      <td>34.1</td>\n      <td>0.123</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>50.000000</td>\n      <td>85.714286</td>\n      <td>85.714286</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Donlon</td>\n      <td>28.6</td>\n      <td>0.115</td>\n      <td>9.1</td>\n      <td>84.8</td>\n      <td>0.000000</td>\n      <td>83.941606</td>\n      <td>78.807947</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Ellis</td>\n      <td>14.3</td>\n      <td>-0.071</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>75.000000</td>\n      <td>33.333333</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Wilkins</td>\n      <td>13.3</td>\n      <td>0.000</td>\n      <td>9.9</td>\n      <td>96.7</td>\n      <td>92.857143</td>\n      <td>87.683284</td>\n      <td>77.149877</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Todd</td>\n      <td>28.6</td>\n      <td>0.143</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>66.666667</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Woods</td>\n      <td>28.9</td>\n      <td>0.158</td>\n      <td>19.3</td>\n      <td>83.0</td>\n      <td>97.954545</td>\n      <td>92.000000</td>\n      <td>77.840909</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"       Name  Kill %  Hit %  Ace %  Serv %        BH %        SR %        D %\n0      Arun    25.3  0.112   16.3    90.7   85.714286   90.441176  81.617647\n1     Layno     6.8 -0.095   16.8    94.5   97.847358         NaN  78.600823\n2   Sanford    31.9  0.196    8.4    92.1         NaN  100.000000  66.000000\n3   Collier    23.3  0.060   10.6    80.9  100.000000   81.967213  72.815534\n4      Ulak     7.4 -0.185   21.2    86.5   75.000000   82.730924  81.081081\n5   Okonkwo    34.1  0.123    0.0     0.0   50.000000   85.714286  85.714286\n6    Donlon    28.6  0.115    9.1    84.8    0.000000   83.941606  78.807947\n7     Ellis    14.3 -0.071    0.0     0.0    0.000000   75.000000  33.333333\n8   Wilkins    13.3  0.000    9.9    96.7   92.857143   87.683284  77.149877\n9      Todd    28.6  0.143    0.0     0.0         NaN         NaN  66.666667\n10    Woods    28.9  0.158   19.3    83.0   97.954545   92.000000  77.840909","content_type":"text/plain"}}}],"key":"vkhf3qfq8p"}],"data":{"type":"notebook-code"},"key":"jrrps6A4Iv"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df1 = df1.set_index(\"Name\")","key":"oa9SDYmxcc"},{"type":"output","id":"wig3bRSWZxgWTnOhrXluZ","data":[],"key":"w31TOlYC7m"}],"data":{"type":"notebook-code"},"key":"Gr7IgoneW5"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df1 = df1.astype(int)","key":"WmNdV9kRH6"},{"type":"output","id":"HVBKa6gY0gudiTxhDkF-2","data":[{"ename":"IntCastingNaNError","evalue":"Cannot convert non-finite values (NA or inf) to integer","output_type":"error","traceback":"\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mIntCastingNaNError\u001b[0m                        Traceback (most recent call last)\nCell \u001b[0;32mIn[12], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m df1 \u001b[38;5;241m=\u001b[39m \u001b[43mdf1\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mint\u001b[39;49m\u001b[43m)\u001b[49m\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/generic.py:6534\u001b[0m, in \u001b[0;36mNDFrame.astype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   6530\u001b[0m     results \u001b[38;5;241m=\u001b[39m [ser\u001b[38;5;241m.\u001b[39mastype(dtype, copy\u001b[38;5;241m=\u001b[39mcopy) \u001b[38;5;28;01mfor\u001b[39;00m _, ser \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mitems()]\n\u001b[1;32m   6532\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   6533\u001b[0m     \u001b[38;5;66;03m# else, only a single dtype is given\u001b[39;00m\n\u001b[0;32m-> 6534\u001b[0m     new_data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_mgr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6535\u001b[0m     res \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_constructor_from_mgr(new_data, axes\u001b[38;5;241m=\u001b[39mnew_data\u001b[38;5;241m.\u001b[39maxes)\n\u001b[1;32m   6536\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m res\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mastype\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/internals/managers.py:414\u001b[0m, in \u001b[0;36mBaseBlockManager.astype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    411\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m using_copy_on_write():\n\u001b[1;32m    412\u001b[0m     copy \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m--> 414\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    415\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mastype\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    416\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    417\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    418\u001b[0m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    419\u001b[0m \u001b[43m    \u001b[49m\u001b[43musing_cow\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43musing_copy_on_write\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    420\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/internals/managers.py:354\u001b[0m, in \u001b[0;36mBaseBlockManager.apply\u001b[0;34m(self, f, align_keys, **kwargs)\u001b[0m\n\u001b[1;32m    352\u001b[0m         applied \u001b[38;5;241m=\u001b[39m b\u001b[38;5;241m.\u001b[39mapply(f, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    353\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 354\u001b[0m         applied \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mgetattr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    355\u001b[0m     result_blocks \u001b[38;5;241m=\u001b[39m extend_blocks(applied, result_blocks)\n\u001b[1;32m    357\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m)\u001b[38;5;241m.\u001b[39mfrom_blocks(result_blocks, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxes)\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/internals/blocks.py:616\u001b[0m, in \u001b[0;36mBlock.astype\u001b[0;34m(self, dtype, copy, errors, using_cow)\u001b[0m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03mCoerce to the new dtype.\u001b[39;00m\n\u001b[1;32m    598\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    612\u001b[0m \u001b[38;5;124;03mBlock\u001b[39;00m\n\u001b[1;32m    613\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    614\u001b[0m values \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalues\n\u001b[0;32m--> 616\u001b[0m new_values \u001b[38;5;241m=\u001b[39m \u001b[43mastype_array_safe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    618\u001b[0m new_values \u001b[38;5;241m=\u001b[39m maybe_coerce_values(new_values)\n\u001b[1;32m    620\u001b[0m refs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/dtypes/astype.py:238\u001b[0m, in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    235\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m dtype\u001b[38;5;241m.\u001b[39mnumpy_dtype\n\u001b[1;32m    237\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 238\u001b[0m     new_values \u001b[38;5;241m=\u001b[39m \u001b[43mastype_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    239\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (\u001b[38;5;167;01mValueError\u001b[39;00m, \u001b[38;5;167;01mTypeError\u001b[39;00m):\n\u001b[1;32m    240\u001b[0m     \u001b[38;5;66;03m# e.g. _astype_nansafe can fail on object-dtype of strings\u001b[39;00m\n\u001b[1;32m    241\u001b[0m     \u001b[38;5;66;03m#  trying to convert to float\u001b[39;00m\n\u001b[1;32m    242\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/dtypes/astype.py:183\u001b[0m, in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m    180\u001b[0m     values \u001b[38;5;241m=\u001b[39m values\u001b[38;5;241m.\u001b[39mastype(dtype, copy\u001b[38;5;241m=\u001b[39mcopy)\n\u001b[1;32m    182\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 183\u001b[0m     values \u001b[38;5;241m=\u001b[39m \u001b[43m_astype_nansafe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    185\u001b[0m \u001b[38;5;66;03m# in pandas we don't store numpy str dtypes, so convert to object\u001b[39;00m\n\u001b[1;32m    186\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, np\u001b[38;5;241m.\u001b[39mdtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28missubclass\u001b[39m(values\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;241m.\u001b[39mtype, \u001b[38;5;28mstr\u001b[39m):\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/dtypes/astype.py:101\u001b[0m, in \u001b[0;36m_astype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m     96\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m lib\u001b[38;5;241m.\u001b[39mensure_string_array(\n\u001b[1;32m     97\u001b[0m         arr, skipna\u001b[38;5;241m=\u001b[39mskipna, convert_na_value\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m     98\u001b[0m     )\u001b[38;5;241m.\u001b[39mreshape(shape)\n\u001b[1;32m    100\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m np\u001b[38;5;241m.\u001b[39missubdtype(arr\u001b[38;5;241m.\u001b[39mdtype, np\u001b[38;5;241m.\u001b[39mfloating) \u001b[38;5;129;01mand\u001b[39;00m dtype\u001b[38;5;241m.\u001b[39mkind \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124miu\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m--> 101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_astype_float_to_int_nansafe\u001b[49m\u001b[43m(\u001b[49m\u001b[43marr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    103\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m arr\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mobject\u001b[39m:\n\u001b[1;32m    104\u001b[0m     \u001b[38;5;66;03m# if we have a datetime/timedelta array of objects\u001b[39;00m\n\u001b[1;32m    105\u001b[0m     \u001b[38;5;66;03m# then coerce to datetime64[ns] and use DatetimeArray.astype\u001b[39;00m\n\u001b[1;32m    107\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m lib\u001b[38;5;241m.\u001b[39mis_np_dtype(dtype, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mM\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/dtypes/astype.py:146\u001b[0m, in \u001b[0;36m_astype_float_to_int_nansafe\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    143\u001b[0m \u001b[38;5;124;03mastype with a check preventing converting NaN to an meaningless integer value.\u001b[39;00m\n\u001b[1;32m    144\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    145\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m np\u001b[38;5;241m.\u001b[39misfinite(values)\u001b[38;5;241m.\u001b[39mall():\n\u001b[0;32m--> 146\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m IntCastingNaNError(\n\u001b[1;32m    147\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCannot convert non-finite values (NA or inf) to integer\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    148\u001b[0m     )\n\u001b[1;32m    149\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m dtype\u001b[38;5;241m.\u001b[39mkind \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mu\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m    150\u001b[0m     \u001b[38;5;66;03m# GH#45151\u001b[39;00m\n\u001b[1;32m    151\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (values \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m)\u001b[38;5;241m.\u001b[39mall():\n\n\u001b[0;31mIntCastingNaNError\u001b[0m: Cannot convert non-finite values (NA or inf) to integer"}],"key":"BkpSNvSJXQ"}],"data":{"type":"notebook-code"},"key":"J6efrNMt2N"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Arun\"]\nrow.plot.bar()","key":"phdmEcepAv"},{"type":"output","id":"VmFsTZo18bQx9hyi6UgH-","data":[{"output_type":"execute_result","execution_count":24,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"0e40c539ce67cec1df025aefadf313e7","path":"/0e40c539ce67cec1df025aefadf313e7.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"HziNzZxySm"}],"data":{"type":"notebook-code"},"key":"PcuQ0JjLQu"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Layno\"]\nrow.plot.bar()","key":"Y1Nr8fHIT3"},{"type":"output","id":"jg39SKoTtBjwsK--oub6s","data":[{"output_type":"execute_result","execution_count":14,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"7c530012af2c4c233b3a995c649b7bc9","path":"/7c530012af2c4c233b3a995c649b7bc9.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"Ho6gSCbquO"}],"data":{"type":"notebook-code"},"key":"e1CXYlCN7d"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Sanford\"]\nrow.plot.bar()","key":"SsuNoNeZMg"},{"type":"output","id":"Js5uIj58cd05rlHfWAG5G","data":[{"output_type":"execute_result","execution_count":15,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"f5468d6899742627df1f94de33dd660e","path":"/f5468d6899742627df1f94de33dd660e.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"ZFlnWg3UDc"}],"data":{"type":"notebook-code"},"key":"WNXH7UipYB"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Collier\"]\nrow.plot.bar()","key":"qdLCbSwraq"},{"type":"output","id":"l4ExYZVPukJh7EZs5JJZQ","data":[{"output_type":"execute_result","execution_count":16,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"1f80d6e4cb5cc4602b97dd6f07410619","path":"/1f80d6e4cb5cc4602b97dd6f07410619.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"w2e7SzMKXh"}],"data":{"type":"notebook-code"},"key":"lfHq07g55p"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Ulak\"]\nrow.plot.bar()","key":"rfjy7oxw4C"},{"type":"output","id":"vJveUgHDP5z-vjxfqIEru","data":[{"output_type":"execute_result","execution_count":17,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"9b0e80e8350662adb5aa9d83a90f9ede","path":"/9b0e80e8350662adb5aa9d83a90f9ede.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"zAIcBNdMwd"}],"data":{"type":"notebook-code"},"key":"bPm7WOkYJ9"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Okonkwo\"]\nrow.plot.bar()","key":"pldlFK7kbG"},{"type":"output","id":"RF-gO9VKj0Ubr4HU2Fjh_","data":[{"output_type":"execute_result","execution_count":18,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"b36bfd4705e31fcdeaffb0d5e54408b2","path":"/b36bfd4705e31fcdeaffb0d5e54408b2.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"sGN4B5fUqZ"}],"data":{"type":"notebook-code"},"key":"m1C4eaupgI"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Donlon\"]\nrow.plot.bar()","key":"hikf3Gn83v"},{"type":"output","id":"zs6J2qNCPQrgAZPz0yVAz","data":[{"output_type":"execute_result","execution_count":19,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"02720b12967c90c8088abbdd19512c44","path":"/02720b12967c90c8088abbdd19512c44.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"a3L4zXUuLH"}],"data":{"type":"notebook-code"},"key":"kELbuwBa0R"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Ellis\"]\nrow.plot.bar()","key":"cchEkoWagq"},{"type":"output","id":"ko3EEALWwohUy0Nvjz_jK","data":[{"output_type":"execute_result","execution_count":20,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"2da6e0f4f5d5d5ba0a21c345153325e6","path":"/2da6e0f4f5d5d5ba0a21c345153325e6.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"WLNlDhYPqd"}],"data":{"type":"notebook-code"},"key":"Jqx5gcvDsW"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Wilkins\"]\nrow.plot.bar()","key":"CFeUD6vZRw"},{"type":"output","id":"y4vnr6k71S9NQMnRD_Mt0","data":[{"output_type":"execute_result","execution_count":21,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"0cf4638a2f3d683340e602aee2b88297","path":"/0cf4638a2f3d683340e602aee2b88297.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"aeiozFkNL8"}],"data":{"type":"notebook-code"},"key":"YvsllezM68"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Todd\"]\nrow.plot.bar()","key":"jyxOF608G3"},{"type":"output","id":"eiIq8MUT9MyEwZ91T4UYt","data":[{"output_type":"execute_result","execution_count":22,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"459851944d553488dc1eb3f81260b3b9","path":"/459851944d553488dc1eb3f81260b3b9.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"becACE2n7B"}],"data":{"type":"notebook-code"},"key":"evKHylECcR"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Woods\"]\nrow.plot.bar()","key":"WlaR1UqOXh"},{"type":"output","id":"vMLRNzHhRkus1U6o4bwMb","data":[{"output_type":"execute_result","execution_count":23,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"924f3bfa61a881ff753249634bc32cef","path":"/924f3bfa61a881ff753249634bc32cef.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"IdQTzYjb19"}],"data":{"type":"notebook-code"},"key":"okKKztVCji"}],"key":"KoztwhQ58L"},"references":{"cite":{"order":[],"data":{}}}}