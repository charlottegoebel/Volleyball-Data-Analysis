{"kind":"Notebook","sha256":"8f984ab28d2f6b1b502af2dd32ed9ebbcae46a182026017a8a09749a38c62c03","slug":"charlotte-svballwork","location":"/Charlotte'svballwork.ipynb","dependencies":[],"frontmatter":{"github":"https://github.com/charlottegoebel/Volleyball-Data-Analysis","keywords":[],"exports":[{"format":"ipynb","filename":"Charlotte'svballwork.ipynb","url":"/Charlotte'svballwork-0e0dc7a70a1580ccffcd97e394bde353.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport matplotlib as plt\nimport numpy as np","key":"AxjQwtgJwa"},{"type":"output","id":"ctmJuTuxNg4-aAGviQmWU","data":[],"key":"AXHy39y51H"}],"data":{"type":"notebook-code"},"key":"Ky3eBs4B1w"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"digging_stat = pd.read_csv(\"MaxPrepsVballData-Digging.csv\")","key":"ELyRyumdQs"},{"type":"output","id":"d74OXr6OsceDvQw8NCXV5","data":[],"key":"wJkf4hqcSx"}],"data":{"type":"notebook-code"},"key":"G3UIzMxjiw"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"digging_edited = digging_stat[[\"Name\", \"D\", \"DE\"]]\ndigging_edited","key":"wj0g1RXsyZ"},{"type":"output","id":"56MT0BDQx8NsyhXb567Tt","data":[{"output_type":"execute_result","execution_count":51,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>D</th>\n      <th>DE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>S. Arun(Jr)</td>\n      <td>333</td>\n      <td>75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>J. Layno(Jr)</td>\n      <td>191</td>\n      <td>52</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>M. Sanford(Jr)</td>\n      <td>33</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>C. Collier(Sr)</td>\n      <td>75</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>T. Ulak(Jr)</td>\n      <td>180</td>\n      <td>42</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>A. Okonkwo(Sr)</td>\n      <td>18</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>M. Donlon(Sr)</td>\n      <td>119</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>T. Ellis(Jr)</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>R. Wilkins(Sr)</td>\n      <td>314</td>\n      <td>93</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>C. Todd(Jr)</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>H. Woods(Jr)</td>\n      <td>137</td>\n      <td>39</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"              Name    D  DE\n0      S. Arun(Jr)  333  75\n1     J. Layno(Jr)  191  52\n2   M. Sanford(Jr)   33  17\n3   C. Collier(Sr)   75  28\n4      T. Ulak(Jr)  180  42\n5   A. Okonkwo(Sr)   18   3\n6    M. Donlon(Sr)  119  32\n7     T. Ellis(Jr)    1   2\n8   R. Wilkins(Sr)  314  93\n9      C. Todd(Jr)    2   1\n10    H. Woods(Jr)  137  39","content_type":"text/plain"}}}],"key":"RBVlxDsQMV"}],"data":{"type":"notebook-code"},"key":"VoTS88wHny"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"total_digs = digging_edited[\"D\"] + digging_edited[\"DE\"]\ndig_percentage = (digging_edited[\"D\"] / total_digs) * 100\ndig_percentage","key":"kBORIIE8aS"},{"type":"output","id":"xr7AQggrdfGU22eejSGMh","data":[{"output_type":"execute_result","execution_count":52,"metadata":{},"data":{"text/plain":{"content":"0     81.617647\n1     78.600823\n2     66.000000\n3     72.815534\n4     81.081081\n5     85.714286\n6     78.807947\n7     33.333333\n8     77.149877\n9     66.666667\n10    77.840909\ndtype: float64","content_type":"text/plain"}}}],"key":"eTBmHbmwEy"}],"data":{"type":"notebook-code"},"key":"FGpVQbTL4w"},{"type":"block","children":[{"type":"math","value":"Digging Acronym Key:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>D</mi><mi>i</mi><mi>g</mi><mi>g</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>A</mi><mi>c</mi><mi>r</mi><mi>o</mi><mi>n</mi><mi>y</mi><mi>m</mi><mi>K</mi><mi>e</mi><mi>y</mi><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">Digging Acronym Key:</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">gg</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">cro</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">Key</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span></span></span></span></span>","enumerator":"1","key":"gdaDDuemH7"},{"type":"code","lang":"","value":"**SP**= total sets played; \n**D**= total Digs per season,; \n**DE**= total Digging errors of season; \n**D/S** = avg digs per set;\n**D/M**= avg digs per match;","position":{"start":{"line":2,"column":1},"end":{"line":6,"column":1}},"key":"nT5we9h2E4"}],"data":{"type":"notebook-content"},"key":"X7oydC0ZrJ"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"ball_handling_stat = pd.read_csv(\"MaxPrepsVballData-BallHandling.csv\")","key":"Fjl198ZpE8"},{"type":"output","id":"fgU8zdng_n8guqitfHvMp","data":[],"key":"jMCfIrv3s7"}],"data":{"type":"notebook-code"},"key":"brePC3earA"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"ball_handling_edited = ball_handling_stat[[\"Name\", \"BHA\", \"BHE\"]]\nball_handling_edited","key":"NtGXNOZipZ"},{"type":"output","id":"W2JVUdo3dHuZXdGEeakmJ","data":[{"output_type":"execute_result","execution_count":54,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>BHA</th>\n      <th>BHE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>S. Arun(Jr)</td>\n      <td>7</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>J. Layno(Jr)</td>\n      <td>1533</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C. Collier(Sr)</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>T. Ulak(Jr)</td>\n      <td>4</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A. Okonkwo(Sr)</td>\n      <td>4</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>M. Donlon(Sr)</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>T. Ellis(Jr)</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>R. Wilkins(Sr)</td>\n      <td>14</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>H. Woods(Jr)</td>\n      <td>880</td>\n      <td>18</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"             Name   BHA  BHE\n0     S. Arun(Jr)     7    1\n1    J. Layno(Jr)  1533   33\n2  C. Collier(Sr)     3    0\n3     T. Ulak(Jr)     4    1\n4  A. Okonkwo(Sr)     4    2\n5   M. Donlon(Sr)     2    2\n6    T. Ellis(Jr)     1    1\n7  R. Wilkins(Sr)    14    1\n8    H. Woods(Jr)   880   18","content_type":"text/plain"}}}],"key":"bZLd8Vxw51"}],"data":{"type":"notebook-code"},"key":"qF5gDa2WhM"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"successful_ball_handles = ball_handling_edited[\"BHA\"] - ball_handling_edited[\"BHE\"]\nball_handling_percentage = (successful_ball_handles / ball_handling_edited[\"BHA\"]) * 100\nball_handling_percentage","key":"K1RgwY3eCL"},{"type":"output","id":"8DjoO9Hv_Bc0z05C7mcDP","data":[{"output_type":"execute_result","execution_count":55,"metadata":{},"data":{"text/plain":{"content":"0     85.714286\n1     97.847358\n2    100.000000\n3     75.000000\n4     50.000000\n5      0.000000\n6      0.000000\n7     92.857143\n8     97.954545\ndtype: float64","content_type":"text/plain"}}}],"key":"eOmGXNiGpJ"}],"data":{"type":"notebook-code"},"key":"Mxy4aaas3B"},{"type":"block","children":[{"type":"math","value":"Ball Handling Acronym Key","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>B</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>H</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>A</mi><mi>c</mi><mi>r</mi><mi>o</mi><mi>n</mi><mi>y</mi><mi>m</mi><mi>K</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Ball Handling Acronym Key</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\">an</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">cro</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">Key</span></span></span></span></span>","enumerator":"2","key":"Y4ZRoqOx6Q"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"SP","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"tLyhtM0Jw1"}],"key":"pHYE1Mbm5Z"},{"type":"text","value":"= total sets played;\n","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"xBcTjlnyxC"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Ast","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"DBHMnwkcyj"}],"key":"TiSCUMvadr"},{"type":"text","value":" = total assists;\n","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"CReNiTByxs"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Ast/S","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"d93dFq84bF"}],"key":"qvqTizPxaF"},{"type":"text","value":" = avg assists per set;\n","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"J0MDNXS6LP"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"BHA","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"pJ7p4bAQeB"}],"key":"wUIFSdXvEr"},{"type":"text","value":" = total ball handling attempts\n","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"WrLK0pJvhn"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"BHE","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ztAjKHd1ZX"}],"key":"Jh0fbjBPdC"},{"type":"text","value":" = total ball handling errors","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"kGe8REERMW"}],"key":"YqDIX4eMkc"}],"data":{"type":"notebook-content"},"key":"vu5rF3abaP"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"service_receiving = pd.read_csv(\"MaxPrepsVballData-ServiceReceiving.csv\")","key":"XmswBLrj0x"},{"type":"output","id":"QTEWlTa264FsFoa1SAzLe","data":[],"key":"c43XlxI6xs"}],"data":{"type":"notebook-code"},"key":"zc44nECmg3"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"service_receiving_edited = service_receiving[[\"Name\", \"R\", \"RE\"]]\nservice_receiving_edited","key":"wuia89bR4U"},{"type":"output","id":"_Fnjhs7J-yzK1qCqdOIB2","data":[{"output_type":"execute_result","execution_count":57,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>R</th>\n      <th>RE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>S. Arun(Jr)</td>\n      <td>246</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M. Sanford(Jr)</td>\n      <td>7</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C. Collier(Sr)</td>\n      <td>100</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>T. Ulak(Jr)</td>\n      <td>206</td>\n      <td>43</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A. Okonkwo(Sr)</td>\n      <td>6</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>M. Donlon(Sr)</td>\n      <td>115</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>T. Ellis(Jr)</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>R. Wilkins(Sr)</td>\n      <td>299</td>\n      <td>42</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>H. Woods(Jr)</td>\n      <td>92</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"             Name    R  RE\n0     S. Arun(Jr)  246  26\n1  M. Sanford(Jr)    7   0\n2  C. Collier(Sr)  100  22\n3     T. Ulak(Jr)  206  43\n4  A. Okonkwo(Sr)    6   1\n5   M. Donlon(Sr)  115  22\n6    T. Ellis(Jr)    3   1\n7  R. Wilkins(Sr)  299  42\n8    H. Woods(Jr)   92   8","content_type":"text/plain"}}}],"key":"N7OXp4ZDhy"}],"data":{"type":"notebook-code"},"key":"gU7wiCFKLi"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"service_receiving_edited['percentages'] = 100*service_receiving_edited['R'] / ( service_receiving_edited['R'] + service_receiving_edited['RE'])\nservice_receiving_edited","key":"CKG1Xq1Cyj"},{"type":"output","id":"C43g89nASqZKMj8zV7XFt","data":[{"name":"stderr","output_type":"stream","text":"/var/folders/7y/y3cwmsts0czcq2hzw6ftl5zr0000gn/T/ipykernel_91347/2981082082.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  service_receiving_edited['percentages'] = 100*service_receiving_edited['R'] / ( service_receiving_edited['R'] + service_receiving_edited['RE'])\n"},{"output_type":"execute_result","execution_count":58,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>R</th>\n      <th>RE</th>\n      <th>percentages</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>S. Arun(Jr)</td>\n      <td>246</td>\n      <td>26</td>\n      <td>90.441176</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M. Sanford(Jr)</td>\n      <td>7</td>\n      <td>0</td>\n      <td>100.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C. Collier(Sr)</td>\n      <td>100</td>\n      <td>22</td>\n      <td>81.967213</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>T. Ulak(Jr)</td>\n      <td>206</td>\n      <td>43</td>\n      <td>82.730924</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A. Okonkwo(Sr)</td>\n      <td>6</td>\n      <td>1</td>\n      <td>85.714286</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>M. Donlon(Sr)</td>\n      <td>115</td>\n      <td>22</td>\n      <td>83.941606</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>T. Ellis(Jr)</td>\n      <td>3</td>\n      <td>1</td>\n      <td>75.000000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>R. Wilkins(Sr)</td>\n      <td>299</td>\n      <td>42</td>\n      <td>87.683284</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>H. Woods(Jr)</td>\n      <td>92</td>\n      <td>8</td>\n      <td>92.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"             Name    R  RE  percentages\n0     S. Arun(Jr)  246  26    90.441176\n1  M. Sanford(Jr)    7   0   100.000000\n2  C. Collier(Sr)  100  22    81.967213\n3     T. Ulak(Jr)  206  43    82.730924\n4  A. Okonkwo(Sr)    6   1    85.714286\n5   M. Donlon(Sr)  115  22    83.941606\n6    T. Ellis(Jr)    3   1    75.000000\n7  R. Wilkins(Sr)  299  42    87.683284\n8    H. Woods(Jr)   92   8    92.000000","content_type":"text/plain"}}}],"key":"NhPlXrKbzr"}],"data":{"type":"notebook-code"},"key":"kITw629QBB"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"service_receiving_edited.plot.bar(x='Name', y='percentages')","key":"ZQjuU73Eny"},{"type":"output","id":"IAgm28PZgZzlebA9FGGnm","data":[{"output_type":"execute_result","execution_count":59,"metadata":{},"data":{"text/plain":{"content":"<Axes: xlabel='Name'>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"312cdca01e40a5192024b9f289694005","path":"/312cdca01e40a5192024b9f289694005.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"key":"VeegALfGWn"}],"data":{"type":"notebook-code"},"key":"QxAIlBzoRg"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"total_service_receiving = service_receiving_edited[\"R\"] + service_receiving_edited[\"RE\"]\nservice_receiving_percentage = ((service_receiving_edited[\"R\"] / total_service_receiving) * 100)\nservice_receiving_percentage","key":"uCdhsxiiHG"},{"type":"output","id":"bt1VTCF6nwhFhCKv1Qrjn","data":[{"output_type":"execute_result","execution_count":60,"metadata":{},"data":{"text/plain":{"content":"0     90.441176\n1    100.000000\n2     81.967213\n3     82.730924\n4     85.714286\n5     83.941606\n6     75.000000\n7     87.683284\n8     92.000000\ndtype: float64","content_type":"text/plain"}}}],"key":"x2gfheAAKv"}],"data":{"type":"notebook-code"},"key":"QY9IeV2IyL"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"service_receiving_percentage[0]","key":"imDrITiIGU"},{"type":"output","id":"_JK-14O9ZYOVWjIxn7koe","data":[{"output_type":"execute_result","execution_count":61,"metadata":{},"data":{"text/plain":{"content":"90.44117647058823","content_type":"text/plain"}}}],"key":"qN7P4cSxiV"}],"data":{"type":"notebook-code"},"key":"pesApFr256"},{"type":"block","children":[{"type":"math","value":"Service Receiving Acronym Notes","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>i</mi><mi>c</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>c</mi><mi>e</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>A</mi><mi>c</mi><mi>r</mi><mi>o</mi><mi>n</mi><mi>y</mi><mi>m</mi><mi>N</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Service Receiving Acronym Notes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">ce</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">ece</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">cro</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">es</span></span></span></span></span>","enumerator":"3","key":"Bx7Ub7FBUA"},{"type":"code","lang":"","value":"**SP** = total Sets played;\n**R** = successful service reception;\n**RE** = service reception error;\n**R/S** = average receptions per set;\n**R/M** = average receptions per match;","position":{"start":{"line":2,"column":1},"end":{"line":6,"column":1}},"key":"IZpAzWv0MT"}],"data":{"type":"notebook-content"},"key":"Iq7Ttbwm64"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"PLOTTING GOAL","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ANZEsOo9eA"}],"key":"c0HIXyFygl"},{"type":"text","value":":\ngather everyones success percentages for each category;\nplot all of one person’s percentages on a graph to show what they are best at;\nmake a graph for each player","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xLR3Gahyly"}],"key":"ketk81i8Pb"}],"data":{"type":"notebook-content"},"key":"YBnQcPSL8Z"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\n\nplt.style.use('_mpl-gallery')\n# make data\nx = 0.5 + np.arange(3)\ny = [dig_percentage[8], ball_handling_percentage[8], service_receiving_percentage[8]]\n#plot\nfig, ax = plt.subplots()\nax.bar(x, y, width=1, edgecolor =\"white\", linewidth=0.7)\nax.set(xlim=(0, 3), xticks=np.arange(0, 4),\n       ylim=(0, 100), yticks=np.arange(1,100))\nplt.show()","key":"LgykyYV2Fm"},{"type":"output","id":"q0GPiBjSmnFH0EsbsofuO","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"36636328ee6bb510e10c998b4484ab7f","path":"/36636328ee6bb510e10c998b4484ab7f.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"key":"DpyNFanJkq"}],"data":{"type":"notebook-code"},"key":"tCJsB5H95B"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"super_data = pd.read_csv(\"SuperDataSheet - Sheet1.csv\")\nsuper_data","key":"VUCu7vghC1"},{"type":"output","id":"AQ1Wq-qvGNtY495BIllyZ","data":[{"output_type":"execute_result","execution_count":63,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>SP</th>\n      <th>Ast</th>\n      <th>Ast/S</th>\n      <th>BHA</th>\n      <th>BHE</th>\n      <th>D</th>\n      <th>DE</th>\n      <th>D/S</th>\n      <th>D/M</th>\n      <th>...</th>\n      <th>Tot Blks</th>\n      <th>B/S</th>\n      <th>B/M</th>\n      <th>BE</th>\n      <th>K</th>\n      <th>K/S</th>\n      <th>Kill %</th>\n      <th>Att</th>\n      <th>E</th>\n      <th>Hit %</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Arun</td>\n      <td>74</td>\n      <td>6</td>\n      <td>0.1</td>\n      <td>7</td>\n      <td>1</td>\n      <td>333</td>\n      <td>75</td>\n      <td>4.5</td>\n      <td>15.1</td>\n      <td>...</td>\n      <td>4.0</td>\n      <td>0.1</td>\n      <td>0.2</td>\n      <td>2</td>\n      <td>156</td>\n      <td>2.1</td>\n      <td>25.3</td>\n      <td>616</td>\n      <td>87</td>\n      <td>0.112</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Layno</td>\n      <td>71</td>\n      <td>402</td>\n      <td>5.7</td>\n      <td>1533</td>\n      <td>33</td>\n      <td>191</td>\n      <td>52</td>\n      <td>2.7</td>\n      <td>9.1</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>0.1</td>\n      <td>6.8</td>\n      <td>74</td>\n      <td>12</td>\n      <td>-0.095</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sanford</td>\n      <td>74</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>33</td>\n      <td>17</td>\n      <td>0.4</td>\n      <td>1.5</td>\n      <td>...</td>\n      <td>30.0</td>\n      <td>0.4</td>\n      <td>1.4</td>\n      <td>9</td>\n      <td>83</td>\n      <td>1.1</td>\n      <td>31.9</td>\n      <td>260</td>\n      <td>32</td>\n      <td>0.196</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Collier</td>\n      <td>69</td>\n      <td>3</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>75</td>\n      <td>28</td>\n      <td>1.1</td>\n      <td>3.4</td>\n      <td>...</td>\n      <td>8.0</td>\n      <td>0.1</td>\n      <td>0.4</td>\n      <td>4</td>\n      <td>90</td>\n      <td>1.3</td>\n      <td>23.3</td>\n      <td>386</td>\n      <td>67</td>\n      <td>0.060</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ulak</td>\n      <td>74</td>\n      <td>3</td>\n      <td>0.0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>180</td>\n      <td>42</td>\n      <td>2.4</td>\n      <td>8.2</td>\n      <td>...</td>\n      <td>31.0</td>\n      <td>0.4</td>\n      <td>1.4</td>\n      <td>20</td>\n      <td>2</td>\n      <td>0.0</td>\n      <td>7.4</td>\n      <td>27</td>\n      <td>7</td>\n      <td>-0.185</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Okonkwo</td>\n      <td>74</td>\n      <td>2</td>\n      <td>0.0</td>\n      <td>4</td>\n      <td>2</td>\n      <td>18</td>\n      <td>3</td>\n      <td>0.2</td>\n      <td>0.8</td>\n      <td>...</td>\n      <td>4.0</td>\n      <td>0.1</td>\n      <td>0.2</td>\n      <td>6</td>\n      <td>61</td>\n      <td>0.8</td>\n      <td>34.1</td>\n      <td>179</td>\n      <td>39</td>\n      <td>0.123</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Donlon</td>\n      <td>74</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>119</td>\n      <td>32</td>\n      <td>1.6</td>\n      <td>5.4</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>140</td>\n      <td>1.9</td>\n      <td>28.6</td>\n      <td>489</td>\n      <td>84</td>\n      <td>0.115</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Ellis</td>\n      <td>8</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.1</td>\n      <td>0.2</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.3</td>\n      <td>14.3</td>\n      <td>14</td>\n      <td>3</td>\n      <td>-0.071</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Wilkins</td>\n      <td>64</td>\n      <td>13</td>\n      <td>0.2</td>\n      <td>14</td>\n      <td>1</td>\n      <td>314</td>\n      <td>93</td>\n      <td>4.9</td>\n      <td>16.5</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0.1</td>\n      <td>13.3</td>\n      <td>45</td>\n      <td>6</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Todd</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.2</td>\n      <td>0.3</td>\n      <td>...</td>\n      <td>28.6</td>\n      <td>7.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.2</td>\n      <td>28.6</td>\n      <td>7</td>\n      <td>1</td>\n      <td>0.143</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Woods</td>\n      <td>64</td>\n      <td>223</td>\n      <td>3.5</td>\n      <td>880</td>\n      <td>18</td>\n      <td>137</td>\n      <td>39</td>\n      <td>2.1</td>\n      <td>7.2</td>\n      <td>...</td>\n      <td>28.9</td>\n      <td>443.0</td>\n      <td>58.0</td>\n      <td>13</td>\n      <td>128</td>\n      <td>2.0</td>\n      <td>28.9</td>\n      <td>443</td>\n      <td>58</td>\n      <td>0.158</td>\n    </tr>\n  </tbody>\n</table>\n<p>11 rows × 33 columns</p>\n</div>","content_type":"text/html"},"text/plain":{"content":"       Name  SP  Ast  Ast/S   BHA  BHE    D  DE  D/S   D/M  ...  Tot Blks  \\\n0      Arun  74    6    0.1     7    1  333  75  4.5  15.1  ...       4.0   \n1     Layno  71  402    5.7  1533   33  191  52  2.7   9.1  ...       0.0   \n2   Sanford  74    0    0.0     0    0   33  17  0.4   1.5  ...      30.0   \n3   Collier  69    3    0.0     3    0   75  28  1.1   3.4  ...       8.0   \n4      Ulak  74    3    0.0     4    1  180  42  2.4   8.2  ...      31.0   \n5   Okonkwo  74    2    0.0     4    2   18   3  0.2   0.8  ...       4.0   \n6    Donlon  74    0    0.0     2    2  119  32  1.6   5.4  ...       0.0   \n7     Ellis   8    0    0.0     1    1    1   2  0.1   0.2  ...       0.0   \n8   Wilkins  64   13    0.2    14    1  314  93  4.9  16.5  ...       0.0   \n9      Todd   9    0    0.0     0    0    2   1  0.2   0.3  ...      28.6   \n10    Woods  64  223    3.5   880   18  137  39  2.1   7.2  ...      28.9   \n\n      B/S   B/M  BE    K  K/S  Kill %  Att   E  Hit %  \n0     0.1   0.2   2  156  2.1    25.3  616  87  0.112  \n1     0.0   0.0   0    5  0.1     6.8   74  12 -0.095  \n2     0.4   1.4   9   83  1.1    31.9  260  32  0.196  \n3     0.1   0.4   4   90  1.3    23.3  386  67  0.060  \n4     0.4   1.4  20    2  0.0     7.4   27   7 -0.185  \n5     0.1   0.2   6   61  0.8    34.1  179  39  0.123  \n6     0.0   0.0   0  140  1.9    28.6  489  84  0.115  \n7     0.0   0.0   0    2  0.3    14.3   14   3 -0.071  \n8     0.0   0.0   0    6  0.1    13.3   45   6  0.000  \n9     7.0   1.0   0    2  0.2    28.6    7   1  0.143  \n10  443.0  58.0  13  128  2.0    28.9  443  58  0.158  \n\n[11 rows x 33 columns]","content_type":"text/plain"}}}],"key":"mprgV2GPdL"}],"data":{"type":"notebook-code"},"key":"icZ8rSsyAr"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"super_data_edited = super_data[[\"Name\", \"SP\", \"BHA\", \"BHE\", \"D\", \"DE\", \"Tot Blks\", \"BE\", \"Kill %\", \"Hit %\", \"Ace %\", \"Serv %\"]] ","key":"do8FpYpz7K"},{"type":"output","id":"Ml2uHFAx9p2tayL9u4i7N","data":[],"key":"NfAvccqCRq"}],"data":{"type":"notebook-code"},"key":"j6gTJSPwL0"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"service_receiving_edited[[\"Name\", \"R\", \"RE\"]]","key":"TaAWeW6YXj"},{"type":"output","id":"Wr7LH2UQsn-sx9Yh9Th29","data":[{"output_type":"execute_result","execution_count":65,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>R</th>\n      <th>RE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>S. Arun(Jr)</td>\n      <td>246</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M. Sanford(Jr)</td>\n      <td>7</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C. Collier(Sr)</td>\n      <td>100</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>T. Ulak(Jr)</td>\n      <td>206</td>\n      <td>43</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A. Okonkwo(Sr)</td>\n      <td>6</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>M. Donlon(Sr)</td>\n      <td>115</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>T. Ellis(Jr)</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>R. Wilkins(Sr)</td>\n      <td>299</td>\n      <td>42</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>H. Woods(Jr)</td>\n      <td>92</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"             Name    R  RE\n0     S. Arun(Jr)  246  26\n1  M. Sanford(Jr)    7   0\n2  C. Collier(Sr)  100  22\n3     T. Ulak(Jr)  206  43\n4  A. Okonkwo(Sr)    6   1\n5   M. Donlon(Sr)  115  22\n6    T. Ellis(Jr)    3   1\n7  R. Wilkins(Sr)  299  42\n8    H. Woods(Jr)   92   8","content_type":"text/plain"}}}],"key":"O4XbV8gp4S"}],"data":{"type":"notebook-code"},"key":"idG2k3Z3fv"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\ndf = pd.DataFrame(super_data_edited)\ndf.insert(2, \"R\", [246, 0, 7, 100, 206, 6, 115, 3, 299, 0, 92], True)\ndf.insert(3, \"RE\", [26, 0, 0, 22, 43, 1, 22, 1, 42, 0, 8], True)\nprint(df)","key":"HFW5YOfT8T"},{"type":"output","id":"lyrUmUeldaDTorjJZ_tNO","data":[{"name":"stdout","output_type":"stream","text":"       Name  SP    R  RE   BHA  BHE    D  DE  Tot Blks  BE  Kill %  Hit %  \\\n0      Arun  74  246  26     7    1  333  75       4.0   2    25.3  0.112   \n1     Layno  71    0   0  1533   33  191  52       0.0   0     6.8 -0.095   \n2   Sanford  74    7   0     0    0   33  17      30.0   9    31.9  0.196   \n3   Collier  69  100  22     3    0   75  28       8.0   4    23.3  0.060   \n4      Ulak  74  206  43     4    1  180  42      31.0  20     7.4 -0.185   \n5   Okonkwo  74    6   1     4    2   18   3       4.0   6    34.1  0.123   \n6    Donlon  74  115  22     2    2  119  32       0.0   0    28.6  0.115   \n7     Ellis   8    3   1     1    1    1   2       0.0   0    14.3 -0.071   \n8   Wilkins  64  299  42    14    1  314  93       0.0   0    13.3  0.000   \n9      Todd   9    0   0     0    0    2   1      28.6   0    28.6  0.143   \n10    Woods  64   92   8   880   18  137  39      28.9  13    28.9  0.158   \n\n    Ace %  Serv %  \n0    16.3    90.7  \n1    16.8    94.5  \n2     8.4    92.1  \n3    10.6    80.9  \n4    21.2    86.5  \n5     0.0     0.0  \n6     9.1    84.8  \n7     0.0     0.0  \n8     9.9    96.7  \n9     0.0     0.0  \n10   19.3    83.0  \n"}],"key":"rWWd1xeZb4"}],"data":{"type":"notebook-code"},"key":"nf5kRFe4iq"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"super_data_edited2 = df[[\"Name\", \"SP\", \"R\", \"RE\", \"BHA\", \"BHE\", \"D\", \"DE\", \"Tot Blks\", \"BE\", \"Kill %\", \"Hit %\", \"Ace %\", \"Serv %\"]]\nsuper_data_edited2","key":"nM3YP4zpw9"},{"type":"output","id":"Ubc7FizJl-CkkiUu3BUnh","data":[{"output_type":"execute_result","execution_count":67,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>SP</th>\n      <th>R</th>\n      <th>RE</th>\n      <th>BHA</th>\n      <th>BHE</th>\n      <th>D</th>\n      <th>DE</th>\n      <th>Tot Blks</th>\n      <th>BE</th>\n      <th>Kill %</th>\n      <th>Hit %</th>\n      <th>Ace %</th>\n      <th>Serv %</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Arun</td>\n      <td>74</td>\n      <td>246</td>\n      <td>26</td>\n      <td>7</td>\n      <td>1</td>\n      <td>333</td>\n      <td>75</td>\n      <td>4.0</td>\n      <td>2</td>\n      <td>25.3</td>\n      <td>0.112</td>\n      <td>16.3</td>\n      <td>90.7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Layno</td>\n      <td>71</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1533</td>\n      <td>33</td>\n      <td>191</td>\n      <td>52</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>6.8</td>\n      <td>-0.095</td>\n      <td>16.8</td>\n      <td>94.5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sanford</td>\n      <td>74</td>\n      <td>7</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>33</td>\n      <td>17</td>\n      <td>30.0</td>\n      <td>9</td>\n      <td>31.9</td>\n      <td>0.196</td>\n      <td>8.4</td>\n      <td>92.1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Collier</td>\n      <td>69</td>\n      <td>100</td>\n      <td>22</td>\n      <td>3</td>\n      <td>0</td>\n      <td>75</td>\n      <td>28</td>\n      <td>8.0</td>\n      <td>4</td>\n      <td>23.3</td>\n      <td>0.060</td>\n      <td>10.6</td>\n      <td>80.9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ulak</td>\n      <td>74</td>\n      <td>206</td>\n      <td>43</td>\n      <td>4</td>\n      <td>1</td>\n      <td>180</td>\n      <td>42</td>\n      <td>31.0</td>\n      <td>20</td>\n      <td>7.4</td>\n      <td>-0.185</td>\n      <td>21.2</td>\n      <td>86.5</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Okonkwo</td>\n      <td>74</td>\n      <td>6</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>18</td>\n      <td>3</td>\n      <td>4.0</td>\n      <td>6</td>\n      <td>34.1</td>\n      <td>0.123</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Donlon</td>\n      <td>74</td>\n      <td>115</td>\n      <td>22</td>\n      <td>2</td>\n      <td>2</td>\n      <td>119</td>\n      <td>32</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>28.6</td>\n      <td>0.115</td>\n      <td>9.1</td>\n      <td>84.8</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Ellis</td>\n      <td>8</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>14.3</td>\n      <td>-0.071</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Wilkins</td>\n      <td>64</td>\n      <td>299</td>\n      <td>42</td>\n      <td>14</td>\n      <td>1</td>\n      <td>314</td>\n      <td>93</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>13.3</td>\n      <td>0.000</td>\n      <td>9.9</td>\n      <td>96.7</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Todd</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>28.6</td>\n      <td>0</td>\n      <td>28.6</td>\n      <td>0.143</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Woods</td>\n      <td>64</td>\n      <td>92</td>\n      <td>8</td>\n      <td>880</td>\n      <td>18</td>\n      <td>137</td>\n      <td>39</td>\n      <td>28.9</td>\n      <td>13</td>\n      <td>28.9</td>\n      <td>0.158</td>\n      <td>19.3</td>\n      <td>83.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"       Name  SP    R  RE   BHA  BHE    D  DE  Tot Blks  BE  Kill %  Hit %  \\\n0      Arun  74  246  26     7    1  333  75       4.0   2    25.3  0.112   \n1     Layno  71    0   0  1533   33  191  52       0.0   0     6.8 -0.095   \n2   Sanford  74    7   0     0    0   33  17      30.0   9    31.9  0.196   \n3   Collier  69  100  22     3    0   75  28       8.0   4    23.3  0.060   \n4      Ulak  74  206  43     4    1  180  42      31.0  20     7.4 -0.185   \n5   Okonkwo  74    6   1     4    2   18   3       4.0   6    34.1  0.123   \n6    Donlon  74  115  22     2    2  119  32       0.0   0    28.6  0.115   \n7     Ellis   8    3   1     1    1    1   2       0.0   0    14.3 -0.071   \n8   Wilkins  64  299  42    14    1  314  93       0.0   0    13.3  0.000   \n9      Todd   9    0   0     0    0    2   1      28.6   0    28.6  0.143   \n10    Woods  64   92   8   880   18  137  39      28.9  13    28.9  0.158   \n\n    Ace %  Serv %  \n0    16.3    90.7  \n1    16.8    94.5  \n2     8.4    92.1  \n3    10.6    80.9  \n4    21.2    86.5  \n5     0.0     0.0  \n6     9.1    84.8  \n7     0.0     0.0  \n8     9.9    96.7  \n9     0.0     0.0  \n10   19.3    83.0  ","content_type":"text/plain"}}}],"key":"EklFh5fxjM"}],"data":{"type":"notebook-code"},"key":"JYiOF9x1f3"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df.insert(4, \"BH %\", (((100 * (super_data_edited[\"BHA\"] - super_data_edited[\"BHE\"])) / super_data_edited[\"BHA\"] )), True)\ndf.insert(5, \"SR %\", ((100 * super_data_edited2[\"R\"]) / ((super_data_edited2[\"R\"] + super_data_edited2[\"RE\"]))), True)\ndf.insert(6, \"D %\", ( (100 * super_data_edited2[\"D\"]) / (super_data_edited2[\"D\"] + super_data_edited2[\"DE\"]) ), True)\ndf.insert(7, \"Block %\", ((100 * super_data_edited2[\"Tot Blks\"]) / (super_data_edited2[\"Tot Blks\"] + super_data_edited2[\"BE\"])), True)\nprint(df)\n","key":"yUD85Fwdjm"},{"type":"output","id":"Cd1BCoisGnp4lZytVEakK","data":[{"name":"stdout","output_type":"stream","text":"       Name  SP    R  RE        BH %        SR %        D %     Block %   BHA  \\\n0      Arun  74  246  26   85.714286   90.441176  81.617647   66.666667     7   \n1     Layno  71    0   0   97.847358         NaN  78.600823         NaN  1533   \n2   Sanford  74    7   0         NaN  100.000000  66.000000   76.923077     0   \n3   Collier  69  100  22  100.000000   81.967213  72.815534   66.666667     3   \n4      Ulak  74  206  43   75.000000   82.730924  81.081081   60.784314     4   \n5   Okonkwo  74    6   1   50.000000   85.714286  85.714286   40.000000     4   \n6    Donlon  74  115  22    0.000000   83.941606  78.807947         NaN     2   \n7     Ellis   8    3   1    0.000000   75.000000  33.333333         NaN     1   \n8   Wilkins  64  299  42   92.857143   87.683284  77.149877         NaN    14   \n9      Todd   9    0   0         NaN         NaN  66.666667  100.000000     0   \n10    Woods  64   92   8   97.954545   92.000000  77.840909   68.973747   880   \n\n    BHE    D  DE  Tot Blks  BE  Kill %  Hit %  Ace %  Serv %  \n0     1  333  75       4.0   2    25.3  0.112   16.3    90.7  \n1    33  191  52       0.0   0     6.8 -0.095   16.8    94.5  \n2     0   33  17      30.0   9    31.9  0.196    8.4    92.1  \n3     0   75  28       8.0   4    23.3  0.060   10.6    80.9  \n4     1  180  42      31.0  20     7.4 -0.185   21.2    86.5  \n5     2   18   3       4.0   6    34.1  0.123    0.0     0.0  \n6     2  119  32       0.0   0    28.6  0.115    9.1    84.8  \n7     1    1   2       0.0   0    14.3 -0.071    0.0     0.0  \n8     1  314  93       0.0   0    13.3  0.000    9.9    96.7  \n9     0    2   1      28.6   0    28.6  0.143    0.0     0.0  \n10   18  137  39      28.9  13    28.9  0.158   19.3    83.0  \n"}],"key":"jM30Sbdpl8"}],"data":{"type":"notebook-code"},"key":"JZSFFtnPTU"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df1 = df[[\"Name\",\"Kill %\", \"Hit %\", \"Ace %\", \"Serv %\", \"Block %\", \"BH %\", \"SR %\", \"D %\"]]\ndf1","identifier":"my-cell-code","enumerator":"1","html_id":"my-cell-code","key":"sNFbMBnAY9"},{"type":"output","id":"FoEEorD80Q37lu_q7fe8r","data":[{"output_type":"execute_result","execution_count":69,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Kill %</th>\n      <th>Hit %</th>\n      <th>Ace %</th>\n      <th>Serv %</th>\n      <th>Block %</th>\n      <th>BH %</th>\n      <th>SR %</th>\n      <th>D %</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Arun</td>\n      <td>25.3</td>\n      <td>0.112</td>\n      <td>16.3</td>\n      <td>90.7</td>\n      <td>66.666667</td>\n      <td>85.714286</td>\n      <td>90.441176</td>\n      <td>81.617647</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Layno</td>\n      <td>6.8</td>\n      <td>-0.095</td>\n      <td>16.8</td>\n      <td>94.5</td>\n      <td>NaN</td>\n      <td>97.847358</td>\n      <td>NaN</td>\n      <td>78.600823</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sanford</td>\n      <td>31.9</td>\n      <td>0.196</td>\n      <td>8.4</td>\n      <td>92.1</td>\n      <td>76.923077</td>\n      <td>NaN</td>\n      <td>100.000000</td>\n      <td>66.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Collier</td>\n      <td>23.3</td>\n      <td>0.060</td>\n      <td>10.6</td>\n      <td>80.9</td>\n      <td>66.666667</td>\n      <td>100.000000</td>\n      <td>81.967213</td>\n      <td>72.815534</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ulak</td>\n      <td>7.4</td>\n      <td>-0.185</td>\n      <td>21.2</td>\n      <td>86.5</td>\n      <td>60.784314</td>\n      <td>75.000000</td>\n      <td>82.730924</td>\n      <td>81.081081</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Okonkwo</td>\n      <td>34.1</td>\n      <td>0.123</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>40.000000</td>\n      <td>50.000000</td>\n      <td>85.714286</td>\n      <td>85.714286</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Donlon</td>\n      <td>28.6</td>\n      <td>0.115</td>\n      <td>9.1</td>\n      <td>84.8</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>83.941606</td>\n      <td>78.807947</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Ellis</td>\n      <td>14.3</td>\n      <td>-0.071</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>75.000000</td>\n      <td>33.333333</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Wilkins</td>\n      <td>13.3</td>\n      <td>0.000</td>\n      <td>9.9</td>\n      <td>96.7</td>\n      <td>NaN</td>\n      <td>92.857143</td>\n      <td>87.683284</td>\n      <td>77.149877</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Todd</td>\n      <td>28.6</td>\n      <td>0.143</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>100.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>66.666667</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Woods</td>\n      <td>28.9</td>\n      <td>0.158</td>\n      <td>19.3</td>\n      <td>83.0</td>\n      <td>68.973747</td>\n      <td>97.954545</td>\n      <td>92.000000</td>\n      <td>77.840909</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"       Name  Kill %  Hit %  Ace %  Serv %     Block %        BH %        SR %  \\\n0      Arun    25.3  0.112   16.3    90.7   66.666667   85.714286   90.441176   \n1     Layno     6.8 -0.095   16.8    94.5         NaN   97.847358         NaN   \n2   Sanford    31.9  0.196    8.4    92.1   76.923077         NaN  100.000000   \n3   Collier    23.3  0.060   10.6    80.9   66.666667  100.000000   81.967213   \n4      Ulak     7.4 -0.185   21.2    86.5   60.784314   75.000000   82.730924   \n5   Okonkwo    34.1  0.123    0.0     0.0   40.000000   50.000000   85.714286   \n6    Donlon    28.6  0.115    9.1    84.8         NaN    0.000000   83.941606   \n7     Ellis    14.3 -0.071    0.0     0.0         NaN    0.000000   75.000000   \n8   Wilkins    13.3  0.000    9.9    96.7         NaN   92.857143   87.683284   \n9      Todd    28.6  0.143    0.0     0.0  100.000000         NaN         NaN   \n10    Woods    28.9  0.158   19.3    83.0   68.973747   97.954545   92.000000   \n\n          D %  \n0   81.617647  \n1   78.600823  \n2   66.000000  \n3   72.815534  \n4   81.081081  \n5   85.714286  \n6   78.807947  \n7   33.333333  \n8   77.149877  \n9   66.666667  \n10  77.840909  ","content_type":"text/plain"}}}],"identifier":"my-cell-output","html_id":"my-cell-output","key":"uVF6o6nVmm"}],"data":{"type":"notebook-code"},"identifier":"my-cell","label":"my-cell","html_id":"my-cell","key":"cWP1WuTXno"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df1 = df1.set_index(\"Name\")","key":"PqqCWo3AkE"},{"type":"output","id":"Kdbyd1PLlgwOrZnmKAnox","data":[],"key":"BEqTdzGwMM"}],"data":{"type":"notebook-code"},"key":"lN0yLDHA8x"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df1 = df1.astype(int)","key":"v1bxfJMwr7"},{"type":"output","id":"Po_JZKlt5bp2YVrV101gy","data":[{"ename":"IntCastingNaNError","evalue":"Cannot convert non-finite values (NA or inf) to integer","output_type":"error","traceback":"\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mIntCastingNaNError\u001b[0m                        Traceback (most recent call last)\nCell \u001b[0;32mIn[71], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m df1 \u001b[38;5;241m=\u001b[39m \u001b[43mdf1\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mint\u001b[39;49m\u001b[43m)\u001b[49m\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/generic.py:6534\u001b[0m, in \u001b[0;36mNDFrame.astype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   6530\u001b[0m     results \u001b[38;5;241m=\u001b[39m [ser\u001b[38;5;241m.\u001b[39mastype(dtype, copy\u001b[38;5;241m=\u001b[39mcopy) \u001b[38;5;28;01mfor\u001b[39;00m _, ser \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mitems()]\n\u001b[1;32m   6532\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   6533\u001b[0m     \u001b[38;5;66;03m# else, only a single dtype is given\u001b[39;00m\n\u001b[0;32m-> 6534\u001b[0m     new_data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_mgr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6535\u001b[0m     res \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_constructor_from_mgr(new_data, axes\u001b[38;5;241m=\u001b[39mnew_data\u001b[38;5;241m.\u001b[39maxes)\n\u001b[1;32m   6536\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m res\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mastype\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/internals/managers.py:414\u001b[0m, in \u001b[0;36mBaseBlockManager.astype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    411\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m using_copy_on_write():\n\u001b[1;32m    412\u001b[0m     copy \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m--> 414\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    415\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mastype\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    416\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    417\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    418\u001b[0m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    419\u001b[0m \u001b[43m    \u001b[49m\u001b[43musing_cow\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43musing_copy_on_write\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    420\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/internals/managers.py:354\u001b[0m, in \u001b[0;36mBaseBlockManager.apply\u001b[0;34m(self, f, align_keys, **kwargs)\u001b[0m\n\u001b[1;32m    352\u001b[0m         applied \u001b[38;5;241m=\u001b[39m b\u001b[38;5;241m.\u001b[39mapply(f, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    353\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 354\u001b[0m         applied \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mgetattr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    355\u001b[0m     result_blocks \u001b[38;5;241m=\u001b[39m extend_blocks(applied, result_blocks)\n\u001b[1;32m    357\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m)\u001b[38;5;241m.\u001b[39mfrom_blocks(result_blocks, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxes)\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/internals/blocks.py:616\u001b[0m, in \u001b[0;36mBlock.astype\u001b[0;34m(self, dtype, copy, errors, using_cow)\u001b[0m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03mCoerce to the new dtype.\u001b[39;00m\n\u001b[1;32m    598\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    612\u001b[0m \u001b[38;5;124;03mBlock\u001b[39;00m\n\u001b[1;32m    613\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    614\u001b[0m values \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalues\n\u001b[0;32m--> 616\u001b[0m new_values \u001b[38;5;241m=\u001b[39m \u001b[43mastype_array_safe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    618\u001b[0m new_values \u001b[38;5;241m=\u001b[39m maybe_coerce_values(new_values)\n\u001b[1;32m    620\u001b[0m refs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/dtypes/astype.py:238\u001b[0m, in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    235\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m dtype\u001b[38;5;241m.\u001b[39mnumpy_dtype\n\u001b[1;32m    237\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 238\u001b[0m     new_values \u001b[38;5;241m=\u001b[39m \u001b[43mastype_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    239\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (\u001b[38;5;167;01mValueError\u001b[39;00m, \u001b[38;5;167;01mTypeError\u001b[39;00m):\n\u001b[1;32m    240\u001b[0m     \u001b[38;5;66;03m# e.g. _astype_nansafe can fail on object-dtype of strings\u001b[39;00m\n\u001b[1;32m    241\u001b[0m     \u001b[38;5;66;03m#  trying to convert to float\u001b[39;00m\n\u001b[1;32m    242\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/dtypes/astype.py:183\u001b[0m, in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m    180\u001b[0m     values \u001b[38;5;241m=\u001b[39m values\u001b[38;5;241m.\u001b[39mastype(dtype, copy\u001b[38;5;241m=\u001b[39mcopy)\n\u001b[1;32m    182\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 183\u001b[0m     values \u001b[38;5;241m=\u001b[39m \u001b[43m_astype_nansafe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    185\u001b[0m \u001b[38;5;66;03m# in pandas we don't store numpy str dtypes, so convert to object\u001b[39;00m\n\u001b[1;32m    186\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, np\u001b[38;5;241m.\u001b[39mdtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28missubclass\u001b[39m(values\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;241m.\u001b[39mtype, \u001b[38;5;28mstr\u001b[39m):\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/dtypes/astype.py:101\u001b[0m, in \u001b[0;36m_astype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m     96\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m lib\u001b[38;5;241m.\u001b[39mensure_string_array(\n\u001b[1;32m     97\u001b[0m         arr, skipna\u001b[38;5;241m=\u001b[39mskipna, convert_na_value\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m     98\u001b[0m     )\u001b[38;5;241m.\u001b[39mreshape(shape)\n\u001b[1;32m    100\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m np\u001b[38;5;241m.\u001b[39missubdtype(arr\u001b[38;5;241m.\u001b[39mdtype, np\u001b[38;5;241m.\u001b[39mfloating) \u001b[38;5;129;01mand\u001b[39;00m dtype\u001b[38;5;241m.\u001b[39mkind \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124miu\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m--> 101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_astype_float_to_int_nansafe\u001b[49m\u001b[43m(\u001b[49m\u001b[43marr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    103\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m arr\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mobject\u001b[39m:\n\u001b[1;32m    104\u001b[0m     \u001b[38;5;66;03m# if we have a datetime/timedelta array of objects\u001b[39;00m\n\u001b[1;32m    105\u001b[0m     \u001b[38;5;66;03m# then coerce to datetime64[ns] and use DatetimeArray.astype\u001b[39;00m\n\u001b[1;32m    107\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m lib\u001b[38;5;241m.\u001b[39mis_np_dtype(dtype, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mM\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\nFile \u001b[0;32m~/miniforge3/envs/jterm1/lib/python3.12/site-packages/pandas/core/dtypes/astype.py:146\u001b[0m, in \u001b[0;36m_astype_float_to_int_nansafe\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    143\u001b[0m \u001b[38;5;124;03mastype with a check preventing converting NaN to an meaningless integer value.\u001b[39;00m\n\u001b[1;32m    144\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    145\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m np\u001b[38;5;241m.\u001b[39misfinite(values)\u001b[38;5;241m.\u001b[39mall():\n\u001b[0;32m--> 146\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m IntCastingNaNError(\n\u001b[1;32m    147\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCannot convert non-finite values (NA or inf) to integer\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    148\u001b[0m     )\n\u001b[1;32m    149\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m dtype\u001b[38;5;241m.\u001b[39mkind \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mu\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m    150\u001b[0m     \u001b[38;5;66;03m# GH#45151\u001b[39;00m\n\u001b[1;32m    151\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (values \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m)\u001b[38;5;241m.\u001b[39mall():\n\n\u001b[0;31mIntCastingNaNError\u001b[0m: Cannot convert non-finite values (NA or inf) to integer"}],"key":"LadSDsLzIJ"}],"data":{"type":"notebook-code"},"key":"hyXpb44tjs"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Arun\"]\nrow.plot.bar()","identifier":"saachi-code","enumerator":"2","html_id":"saachi-code","key":"DCzBB6oaEH"},{"type":"output","id":"OpF7NEj8WMoEdcMh1Q2To","data":[{"output_type":"execute_result","execution_count":83,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"6d9e231a47e88c676495060f9e5ab63e","path":"/6d9e231a47e88c676495060f9e5ab63e.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"saachi-output","html_id":"saachi-output","key":"rCZ3zaIWVj"}],"data":{"type":"notebook-code"},"identifier":"saachi","label":"saachi","html_id":"saachi","key":"Y0yX9IUUWB"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Layno\"]\nrow.plot.bar()","identifier":"jules-code","enumerator":"3","html_id":"jules-code","key":"JKHoyU33UQ"},{"type":"output","id":"nIpYtyY6LR4sAYT1ILBf_","data":[{"output_type":"execute_result","execution_count":84,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"cb0d274e18e50b7c3a02b14c8473a248","path":"/cb0d274e18e50b7c3a02b14c8473a248.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"jules-output","html_id":"jules-output","key":"T0ow7TKNa3"}],"data":{"type":"notebook-code"},"identifier":"jules","label":"jules","html_id":"jules","key":"WQbqPvA4ND"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Sanford\"]\nrow.plot.bar()","identifier":"mack-code","enumerator":"4","html_id":"mack-code","key":"OEO9h4OUN5"},{"type":"output","id":"7EN5MgpIB3Iqv_aA5YMme","data":[{"output_type":"execute_result","execution_count":85,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"a7084055d60061f6fefa7d46f4090313","path":"/a7084055d60061f6fefa7d46f4090313.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"mack-output","html_id":"mack-output","key":"YB9SH7nhwg"}],"data":{"type":"notebook-code"},"identifier":"mack","label":"mack","html_id":"mack","key":"boCRCejCAJ"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Collier\"]\nrow.plot.bar()","identifier":"claire-code","enumerator":"5","html_id":"claire-code","key":"mswLCSew4b"},{"type":"output","id":"ntaiXaS3RCdpHmNFxkjVG","data":[{"output_type":"execute_result","execution_count":86,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"1e1063c8f8f048c62b4465895bcdf5a7","path":"/1e1063c8f8f048c62b4465895bcdf5a7.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"claire-output","html_id":"claire-output","key":"IYeHGmp2JL"}],"data":{"type":"notebook-code"},"identifier":"claire","label":"claire","html_id":"claire","key":"jgFncYYx4f"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Ulak\"]\nrow.plot.bar()","identifier":"tish-code","enumerator":"6","html_id":"tish-code","key":"NQVteMwsyG"},{"type":"output","id":"xh41ypfAzuGOLVbtJfHdz","data":[{"output_type":"execute_result","execution_count":87,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"611174ceede2081ca5b69df369169249","path":"/611174ceede2081ca5b69df369169249.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"tish-output","html_id":"tish-output","key":"e5EtCe32qE"}],"data":{"type":"notebook-code"},"identifier":"tish","label":"tish","html_id":"tish","key":"EUpI8yvmOV"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Okonkwo\"]\nrow.plot.bar()","identifier":"amy-code","enumerator":"7","html_id":"amy-code","key":"PGWkVlUo9V"},{"type":"output","id":"pbaeiLcqI_jzFADhKat8O","data":[{"output_type":"execute_result","execution_count":88,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"582c240a8fb14e14eca6eb53c0af07c0","path":"/582c240a8fb14e14eca6eb53c0af07c0.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"amy-output","html_id":"amy-output","key":"bDVKnf6DQ0"}],"data":{"type":"notebook-code"},"identifier":"amy","label":"amy","html_id":"amy","key":"oZwQyDGh7A"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Donlon\"]\nrow.plot.bar()","identifier":"maren-code","enumerator":"8","html_id":"maren-code","key":"pkIQEHjPyi"},{"type":"output","id":"c7ys3FHiw8aiZ7yN_An32","data":[{"output_type":"execute_result","execution_count":89,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"83c8eeff9024cf3f5887f31094a8b9ac","path":"/83c8eeff9024cf3f5887f31094a8b9ac.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"maren-output","html_id":"maren-output","key":"YFnp8QX05k"}],"data":{"type":"notebook-code"},"identifier":"maren","label":"maren","html_id":"maren","key":"g4EAxXHhQT"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Ellis\"]\nrow.plot.bar()","identifier":"taylor-code","enumerator":"9","html_id":"taylor-code","key":"XQxU1w09r4"},{"type":"output","id":"OjvdQYp03DHP8rMHbUSWa","data":[{"output_type":"execute_result","execution_count":90,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"a060580e81fd18bca3af8b27f560b352","path":"/a060580e81fd18bca3af8b27f560b352.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"taylor-output","html_id":"taylor-output","key":"yDDMottbEQ"}],"data":{"type":"notebook-code","scrolled":true},"identifier":"taylor","label":"taylor","html_id":"taylor","key":"vE8AG6bC9p"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Wilkins\"]\nrow.plot.bar()","identifier":"muff-code","enumerator":"10","html_id":"muff-code","key":"pL7t5hEuxq"},{"type":"output","id":"Bq27tmT-xmcvSHxVrhiHq","data":[{"output_type":"execute_result","execution_count":91,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"0dfba0de882c9ce3e0b9a94a8ede94bd","path":"/0dfba0de882c9ce3e0b9a94a8ede94bd.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"muff-output","html_id":"muff-output","key":"Zmk0KIEsVe"}],"data":{"type":"notebook-code"},"identifier":"muff","label":"muff","html_id":"muff","key":"DQqMSMJSv5"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Todd\"]\nrow.plot.bar()","identifier":"cat-code","enumerator":"11","html_id":"cat-code","key":"tBdxmCr0jo"},{"type":"output","id":"-FVU-5zVFNABZFvNbiYKv","data":[{"output_type":"execute_result","execution_count":92,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"2951970d4c1d2d963594585c52494605","path":"/2951970d4c1d2d963594585c52494605.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"cat-output","html_id":"cat-output","key":"XBpl3f8SVx"}],"data":{"type":"notebook-code"},"identifier":"cat","label":"cat","html_id":"cat","key":"lIv8bnVdjS"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"row = df1.loc[\"Woods\"]\nrow.plot.bar()","identifier":"hadley-code","enumerator":"12","html_id":"hadley-code","key":"QliUJ64z6d"},{"type":"output","id":"7lcLmpqf2UQzdvl7S-tRw","data":[{"output_type":"execute_result","execution_count":93,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"d9eea201189fc26535db5a45214cd419","path":"/d9eea201189fc26535db5a45214cd419.png"},"text/plain":{"content":"<Figure size 200x200 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"hadley-output","html_id":"hadley-output","key":"JbVH8uDPMq"}],"data":{"type":"notebook-code"},"identifier":"hadley","label":"hadley","html_id":"hadley","key":"BqxWSRk7N7"}],"key":"Km0Su3YJfA"},"references":{"cite":{"order":[],"data":{}}}}